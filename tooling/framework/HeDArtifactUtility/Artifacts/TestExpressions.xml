<?xml version="1.0" encoding="UTF-8"?>
<knowledgeDocument 
		xmlns="urn:hl7-org:knowledgeartifact:r1" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:dt="urn:hl7-org:cdsdt:r2"
		xmlns:vmr="urn:hl7-org:vmr:r2"
		xsi:schemaLocation="urn:hl7-org:knowledgeartifact:r1 ../schema/knowledgeartifact/knowledgedocument.xsd urn:hl7-org:vmr:r2 ../schema/vmr/vmr.xsd">
	<metadata>
		<identifiers>
			<identifier root="TestExpressions" version="1.0"/>
		</identifiers>
		<artifactType value="Rule"/>
		<schemaIdentifier root="urn:hl7-org:knowledgeartifact:r1" version="1.0"/>
		<dataModels>
			<modelReference>
				<description value="HL7 Virtual Medical Record 1.0"/>
				<referencedModel value="urn:hl7-org:vmr:r2"/>
			</modelReference>
		</dataModels>
		<title value="Test Expressions"/>
		<status value="InTest"/>
	</metadata>
	<externalData>
		<parameter name="TestParameter" parameterType="Integer">
			<default xsi:type="Literal" valueType="Integer" value="5"/>
		</parameter>
		<def name="TestExternalDataDef">
			<expression xsi:type="List">
				<element xsi:type="Literal" valueType="Integer" value="1"/>
				<element xsi:type="Literal" valueType="Integer" value="2"/>
				<element xsi:type="Literal" valueType="Integer" value="3"/>
				<element xsi:type="Literal" valueType="Integer" value="4"/>
				<element xsi:type="Literal" valueType="Integer" value="5"/>
			</expression>
		</def>
	</externalData>
	<expressions>
		<!-- ********** Expressions and Parameters ********** -->
		<def name="ExpressionRef">
			<expression xsi:type="ExpressionRef" name="TestExternalDataDef"/>
		</def>
		<def name="ParameterRef">
			<expression xsi:type="ParameterRef" name="TestParameter"/>
		</def>
		<!-- ********** Values ********** -->
		<!-- Literal -->
		<def name="LiteralOfBoolean">
			<expression xsi:type="Literal" valueType="Boolean" value="true"/>
		</def>
		<def name="LiteralOfInteger">
			<expression xsi:type="Literal" valueType="Integer" value="1"/>
		</def>
		<def name="LiteralOfReal">
			<expression xsi:type="Literal" valueType="Real" value="1.5"/>
		</def>
		<def name="LiteralOfString">
			<expression xsi:type="Literal" valueType="String" value="StringValue"/>
		</def>
		<def name="LiteralOfTimestamp">
			<expression xsi:type="Literal" valueType="Timestamp" value="20100101120000"/>
		</def>
		<!-- ComplexLiteral -->
		<def name="ComplexLiteral">
			<expression xsi:type="ComplexLiteral">
				<value xsi:type="dt:CD" code="12345" codeSystem="CodeSystem" codeSystemName="CodeSystemName">
					<dt:displayName value="DisplayName"/>
					<dt:originalText value="OriginalText"/>
				</value>
			</expression>
		</def>
		<!-- ObjectExpression -->
		<def name="ObjectExpression">
			<expression xsi:type="ObjectExpression" objectType="dt:CD">
				<property name="code">
					<value xsi:type="StringLiteral" value="12345"/>
				</property>
				<property name="codeSystem">
					<value xsi:type="StringLiteral" value="CodeSystem"/>
				</property>
				<property name="codeSystemName">
					<value xsi:type="StringLiteral" value="CodeSystemName"/>
				</property>
				<property name="displayName">
					<value xsi:type="StringLiteral" value="DisplayName"/>
				</property>
				<property name="originalText">
					<value xsi:type="StringLiteral" value="OriginalText"/>
				</property>
			</expression>
		</def>
		<!-- ObjectDescriptor -->
		<def name="ObjectDescriptor">
			<expression xsi:type="ObjectDescriptor" objectType="dt:CD">
				<property name="code">
					<value xsi:type="StringLiteral" value="12345"/>
				</property>
			</expression>
		</def>
		<!-- ObjectRedefine -->
		<def name="ObjectRedefine">
			<expression xsi:type="ObjectRedefine">
				<source xsi:type="ExpressionRef" name="ObjectExpression"/>
				<property name="codeSystem">
					<value xsi:type="Concat">
						<operand xsi:type="Property" path="codeSystem"/>
						<operand xsi:type="StringLiteral" value="-Concat-CodeSystem"/>
					</value>
				</property>
			</expression>
		</def>
		<!-- Interval -->
		<def name="Interval">
			<expression xsi:type="Interval">
				<begin xsi:type="IntegerLiteral" value="1"/>
				<end xsi:type="IntegerLiteral" value="5"/>
			</expression>
		</def>
		<!-- List -->
		<def name="List">
			<expression xsi:type="List">
				<element xsi:type="IntegerLiteral" value="1"/>
				<element xsi:type="IntegerLiteral" value="2"/>
				<element xsi:type="IntegerLiteral" value="3"/>
				<element xsi:type="IntegerLiteral" value="4"/>
				<element xsi:type="IntegerLiteral" value="5"/>
			</expression>
		</def>
		<!-- ********** Extended Literals ********** -->
		<!-- AddressLiteral -->
		<def name="AddressLiteral">
			<expression xsi:type="AddressLiteral">
				<part value="123 Spinning Ave" type="ADL"/>
			</expression>
		</def>
		<!-- BooleanLiteral -->
		<def name="BooleanLiteral">
			<expression xsi:type="BooleanLiteral" value="true"/>
		</def>
		<!-- CodeLiteral -->
		<def name="CodeLiteral">
			<expression xsi:type="CodeLiteral" code="12345" codeSystem="CodeSystem" codeSystemName="CodeSystemName" displayName="DisplayName"/>
		</def>
		<!-- CodedOrdinalLiteral -->
		<def name="CodedOrdinalLiteral">
			<expression xsi:type="CodedOrdinalLiteral" code="12345" codeSystem="CodeSystem" codeSystemName="CodeSystemName" displayName="DisplayName" value="1"/>
		</def>
		<!-- SimpleCodeLiteral -->
		<def name="SimpleCodeLiteral">
			<expression xsi:type="SimpleCodeLiteral" code="12345"/>
		</def>
		<!-- EntityNameLiteral -->
		<def name="EntityNameLiteral">
			<expression xsi:type="EntityNameLiteral">
				<part value="First" type="GIV"/>
				<part value="Last" type="FAM"/>
			</expression>
		</def>
		<!-- IdentifierLiteral -->
		<def name="IdentifierLiteral">
			<expression xsi:type="IdentifierLiteral" extension="Extension" root="Root"/>
		</def>
		<!-- IntegerLiteral -->
		<def name="IntegerLiteral">
			<expression xsi:type="IntegerLiteral" value="1"/>
		</def>
		<!-- IntegerIntervalLiteral -->
		<def name="IntegerIntervalLiteral">
			<expression xsi:type="IntegerIntervalLiteral" low="1" lowClosed="true" high="5" highClosed="true"/>
		</def>
		<!-- QuantityIntervalLiteral -->
		<def name="QuantityIntervalLiteral">
			<expression xsi:type="QuantityIntervalLiteral">
				<low xsi:type="dt:INT" value="1"/>
				<high xsi:type="dt:INT" value="5"/>
			</expression>
		</def>
		<!-- RealIntervalLiteral -->
		<def name="RealIntervalLiteral">
			<expression xsi:type="RealIntervalLiteral" low="1.0" high="5.0"/>
		</def>
		<!-- TimestampIntervalLiteral -->
		<def name="TimestampIntervalLiteral">
			<expression xsi:type="TimestampIntervalLiteral" lowClosed="true" highClosed="false">
				<low value="20130101"/>
				<high value="20140101"/>
			</expression>
		</def>
		<!-- PhysicalQuantityLiteral -->
		<def name="PhysicalQuantityLiteral">
			<expression xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
		</def>
		<!-- PhysicalQuantityIntervalLiteral -->
		<def name="PhysicalQuantityIntervalLiteral">
			<expression xsi:type="PhysicalQuantityIntervalLiteral">
				<low value="1" unit="a"/>
				<high value="5" unit="a"/>
			</expression>
		</def>
		<!-- RealLiteral -->
		<def name="RealLiteral">
			<expression xsi:type="RealLiteral" value="1.0"/>
		</def>
		<!-- RatioLiteral -->
		<def name="RatioLiteral">
			<expression xsi:type="RatioLiteral">
				<numerator xsi:type="dt:REAL" value="6.0"/>
				<denominator xsi:type="dt:REAL" value="10.0"/>
			</expression>
		</def>
		<!-- StringLiteral -->
		<def name="StringLiteral">
			<expression xsi:type="StringLiteral" value="TestString"/>
		</def>
		<!-- UrlLiteral -->
		<def name="UrlLiteral">
			<expression xsi:type="UrlLiteral" value="http://hl7.org" use="PUB"/>
		</def>
		<!-- TimestampLiteral -->
		<def name="TimestampLiteral">
			<expression xsi:type="TimestampLiteral" value="20130101"/>
		</def>
		<!-- PeriodLiteral -->
		<def name="PeriodLiteral">
			<expression xsi:type="PeriodLiteral">
				<phase>
					<dt:low value="20130101"/>
					<dt:high value="20131231"/>
				</phase>
				<frequency>
					<dt:numerator xsi:type="dt:INT" value="12"/>
					<dt:denominator xsi:type="dt:PQ" value="1" unit="a"/>
				</frequency>
			</expression>
		</def>
		<!-- ********** Logical Operators ********** -->
		<!-- And -->
		<def name="And">
			<expression xsi:type="And">
				<operand xsi:type="Literal" valueType="Boolean" value="true"/>
				<operand xsi:type="Equal">
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
				</operand>
				<operand xsi:type="Equal">
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
				</operand>
			</expression>
		</def>
		<!-- Or -->
		<def name="Or">
			<expression xsi:type="Or">
				<operand xsi:type="Literal" valueType="Boolean" value="true"/>
				<operand xsi:type="Equal">
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
				</operand>
				<operand xsi:type="Equal">
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
					<operand xsi:type="Literal" valueType="Integer" value="1"/>
				</operand>
			</expression>
		</def>
		<!-- Not -->
		<def name="Not">
			<expression xsi:type="Not">
				<operand xsi:type="Literal" valueType="Boolean" value="true"/>
			</expression>
		</def>
		<!-- Conditional -->
		<def name="Conditional">
			<expression xsi:type="Conditional">
				<condition xsi:type="Literal" valueType="Boolean" value="true"/>
				<then xsi:type="Literal" valueType="Integer" value="1"/>
				<else xsi:type="Literal" valueType="Integer" value="0"/>
			</expression>
		</def>
		<!-- Case -->
		<def name="SelectedCase">
			<expression xsi:type="Case">
				<caseItem>
					<when xsi:type="Literal" valueType="Boolean" value="true"/>
					<then xsi:type="Literal" valueType="Integer" value="1"/>
				</caseItem>
				<caseItem>
					<when xsi:type="Literal" valueType="Boolean" value="false"/>
					<then xsi:type="Literal" valueType="Integer" value="0"/>
				</caseItem>
				<else xsi:type="Literal" valueType="Integer" value="-1"/>
			</expression>
		</def>
		<def name="ComparedCase">
			<expression xsi:type="Case">
				<comparand xsi:type="Literal" valueType="Integer" value="1"/>
				<caseItem>
					<when xsi:type="Literal" valueType="Integer" value="1"/>
					<then xsi:type="Literal" valueType="String" value="One"/>
				</caseItem>
				<caseItem>
					<when xsi:type="Literal" valueType="Integer" value="0"/>
					<then xsi:type="Literal" valueType="String" value="Zero"/>
				</caseItem>
				<else xsi:type="Literal" valueType="String" value="NegativeOne"/>
			</expression>
		</def>
		<!-- ********** Nullological ********** -->
		<!-- Null -->
		<def name="Null">
			<expression xsi:type="Null" valueType="Integer"/>
		</def>
		<!-- IsNull -->
		<def name="IsNull">
			<expression xsi:type="IsNull">
				<operand xsi:type="Null" valueType="Integer"/>
			</expression>
		</def>
		<!-- IfNull -->
		<def name="IfNull">
			<expression xsi:type="IfNull">
				<operand xsi:type="Null" valueType="Integer"/>
				<operand xsi:type="Literal" valueType="Integer" value="0"/>
			</expression>
		</def>
		<!-- Coalesce -->
		<def name="Coalesce">
			<expression xsi:type="Coalesce">
				<operand xsi:type="Null" valueType="Integer"/>
				<operand xsi:type="Null" valueType="Integer"/>
				<operand xsi:type="Literal" valueType="Integer" value="0"/>
			</expression>
		</def>
		<!-- ********** Type Operators *********** -->
		<!-- Is -->
		<def name="Is">
			<expression xsi:type="Is" isType="Integer">
				<operand xsi:type="Literal" valueType="Integer" value="1"/>
			</expression>
		</def>
		<!-- As -->
		<def name="As">
			<expression xsi:type="As" asType="Integer" strict="false">
				<operand xsi:type="Literal" valueType="Integer" value="1"/>
			</expression>
		</def>
		<!-- Convert -->
		<def name="Convert">
			<expression xsi:type="Convert" toType="String">
				<operand xsi:type="Literal" valueType="Integer" value="1"/>
			</expression>
		</def>
		<!-- ********** Comparison Operators *********** -->
		<!-- Equal -->
		<def name="BooleanEqual">
			<expression xsi:type="Equal">
				<operand xsi:type="BooleanLiteral" value="true"/>
				<operand xsi:type="BooleanLiteral" value="true"/>
			</expression>
		</def>
		<def name="IntegerEqual">
			<expression xsi:type="Equal">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealEqual">
			<expression xsi:type="Equal">
				<operand xsi:type="RealLiteral" value="1.0"/>
				<operand xsi:type="RealLiteral" value="1.0"/>
			</expression>
		</def>
		<def name="StringEqual">
			<expression xsi:type="Equal">
				<operand xsi:type="StringLiteral" value="Test"/>
				<operand xsi:type="StringLiteral" value="Test"/>
			</expression>
		</def>
		<def name="TimestampEqual">
			<expression xsi:type="Equal">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<!-- NotEqual -->
		<def name="BooleanNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="BooleanLiteral" value="true"/>
				<operand xsi:type="BooleanLiteral" value="true"/>
			</expression>
		</def>
		<def name="IntegerNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="RealLiteral" value="1.0"/>
				<operand xsi:type="RealLiteral" value="1.0"/>
			</expression>
		</def>
		<def name="StringNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="StringLiteral" value="Test"/>
				<operand xsi:type="StringLiteral" value="Test"/>
			</expression>
		</def>
		<def name="TimestampNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<!-- Less -->
		<def name="IntegerLess">
			<expression xsi:type="Less">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealLess">
			<expression xsi:type="Less">
				<operand xsi:type="RealLiteral" value="1.0"/>
				<operand xsi:type="RealLiteral" value="1.0"/>
			</expression>
		</def>
		<def name="StringLess">
			<expression xsi:type="Less">
				<operand xsi:type="StringLiteral" value="Test"/>
				<operand xsi:type="StringLiteral" value="Test"/>
			</expression>
		</def>
		<def name="TimestampLess">
			<expression xsi:type="Less">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<def name="PhysicalQuantityLess">
			<expression xsi:type="Less">
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
			</expression>
		</def>
		<!-- Greater -->
		<def name="IntegerGreater">
			<expression xsi:type="Greater">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealGreater">
			<expression xsi:type="Greater">
				<operand xsi:type="RealLiteral" value="1.0"/>
				<operand xsi:type="RealLiteral" value="1.0"/>
			</expression>
		</def>
		<def name="StringGreater">
			<expression xsi:type="Greater">
				<operand xsi:type="StringLiteral" value="Test"/>
				<operand xsi:type="StringLiteral" value="Test"/>
			</expression>
		</def>
		<def name="TimestampGreater">
			<expression xsi:type="Greater">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<def name="PhysicalQuantityGreater">
			<expression xsi:type="Greater">
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
			</expression>
		</def>
		<!-- LessOrEqual -->
		<def name="IntegerLessOrEqual">
			<expression xsi:type="LessOrEqual">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealLessOrEqual">
			<expression xsi:type="LessOrEqual">
				<operand xsi:type="RealLiteral" value="1.0"/>
				<operand xsi:type="RealLiteral" value="1.0"/>
			</expression>
		</def>
		<def name="StringLessOrEqual">
			<expression xsi:type="LessOrEqual">
				<operand xsi:type="StringLiteral" value="Test"/>
				<operand xsi:type="StringLiteral" value="Test"/>
			</expression>
		</def>
		<def name="TimestampLessOrEqual">
			<expression xsi:type="LessOrEqual">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<def name="PhysicalQuantityLessOrEqual">
			<expression xsi:type="LessOrEqual">
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
			</expression>
		</def>
		<!-- GreaterOrEqual -->
		<def name="IntegerGreaterOrEqual">
			<expression xsi:type="GreaterOrEqual">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealGreaterOrEqual">
			<expression xsi:type="GreaterOrEqual">
				<operand xsi:type="RealLiteral" value="1.0"/>
				<operand xsi:type="RealLiteral" value="1.0"/>
			</expression>
		</def>
		<def name="StringGreaterOrEqual">
			<expression xsi:type="GreaterOrEqual">
				<operand xsi:type="StringLiteral" value="Test"/>
				<operand xsi:type="StringLiteral" value="Test"/>
			</expression>
		</def>
		<def name="TimestampGreaterOrEqual">
			<expression xsi:type="GreaterOrEqual">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<def name="PhysicalQuantityGreaterOrEqual">
			<expression xsi:type="GreaterOrEqual">
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
				<operand xsi:type="PhysicalQuantityLiteral" value="1" unit="a"/>
			</expression>
		</def>
		<!-- ********** Arithmetic Operators ********** -->
		<!-- Add -->
		<def name="IntegerAdd">
			<expression xsi:type="Add">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealAdd">
			<expression xsi:type="Add">
				<operand xsi:type="RealLiteral" value="1"/>
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Subtract -->
		<def name="IntegerSubtract">
			<expression xsi:type="Subtract">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealSubtract">
			<expression xsi:type="Subtract">
				<operand xsi:type="RealLiteral" value="1"/>
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Multiply -->
		<def name="IntegerMultiply">
			<expression xsi:type="Multiply">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealMultiply">
			<expression xsi:type="Multiply">
				<operand xsi:type="RealLiteral" value="1"/>
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Divide -->
		<def name="IntegerDivide">
			<expression xsi:type="Divide">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealDivide">
			<expression xsi:type="Divide">
				<operand xsi:type="RealLiteral" value="1"/>
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- TruncatedDivide -->
		<def name="TruncatedDivide">
			<expression xsi:type="TruncatedDivide">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<!-- Modulo -->
		<def name="IntegerModulo">
			<expression xsi:type="Modulo">
				<operand xsi:type="IntegerLiteral" value="1"/>
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealModulo">
			<expression xsi:type="Modulo">
				<operand xsi:type="RealLiteral" value="1"/>
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Ceiling -->
		<def name="Ceiling">
			<expression xsi:type="Ceiling">
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Floor -->
		<def name="Floor">
			<expression xsi:type="Floor">
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Truncate -->
		<def name="Truncate">
			<expression xsi:type="Truncate">
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Abs -->
		<def name="IntegerAbs">
			<expression xsi:type="Abs">
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealAbs">
			<expression xsi:type="Abs">
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Negate -->
		<def name="IntegerNegate">
			<expression xsi:type="Negate">
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="RealNegate">
			<expression xsi:type="Negate">
				<operand xsi:type="RealLiteral" value="1"/>
			</expression>
		</def>
		<!-- Round -->
		<def name="Round">
			<expression xsi:type="Round">
				<operand xsi:type="RealLiteral" value="100.125"/>
				<precision xsi:type="IntegerLiteral" value="2"/>
			</expression>
		</def>
		<!-- Ln -->
		<def name="Ln">
			<expression xsi:type="Ln">
				<operand xsi:type="RealLiteral" value="25"/>
			</expression>
		</def>
		<!-- Log -->
		<def name="Log">
			<expression xsi:type="Log">
				<operand xsi:type="RealLiteral" value="8.0"/>
				<operand xsi:type="RealLiteral" value="2.0"/>
			</expression>
		</def>
		<!-- Power -->
		<def name="Power">
			<expression xsi:type="Power">
				<operand xsi:type="RealLiteral" value="2.0"/>
				<operand xsi:type="RealLiteral" value="3.0"/>
			</expression>
		</def>
		<!-- ********** Ordinal Operators ********** -->
		<!-- Succ -->
		<def name="IntegerSucc">
			<expression xsi:type="Succ">
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="TimestampSucc">
			<expression xsi:type="Succ">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<!-- Pred -->
		<def name="IntegerPred">
			<expression xsi:type="Pred">
				<operand xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<def name="TimestampPred">
			<expression xsi:type="Pred">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<!-- MinValue -->
		<def name="IntegerMinValue">
			<expression xsi:type="MinValue" valueType="Integer"/>
		</def>
		<def name="RealMinValue">
			<expression xsi:type="MinValue" valueType="Real"/>
		</def>
		<def name="TimestampMinValue">
			<expression xsi:type="MinValue" valueType="Timestamp"/>
		</def>
		<!-- MaxValue -->
		<def name="IntegerMaxValue">
			<expression xsi:type="MaxValue" valueType="Integer"/>
		</def>
		<def name="RealMaxValue">
			<expression xsi:type="MaxValue" valueType="Real"/>
		</def>
		<def name="TimestampMaxValue">
			<expression xsi:type="MaxValue" valueType="Timestamp"/>
		</def>
		<!-- ********** String Operators ********** -->
		<!-- Concat -->
		<def name="Concat">
			<expression xsi:type="Concat">
				<operand xsi:type="StringLiteral" value="A"/>
				<operand xsi:type="StringLiteral" value="B"/>
				<operand xsi:type="StringLiteral" value="C"/>
			</expression>
		</def>
		<!-- Combine -->
		<def name="Combine">
			<expression xsi:type="Combine">
				<source xsi:type="List">
					<element xsi:type="StringLiteral" value="A"/>
					<element xsi:type="StringLiteral" value="B"/>
					<element xsi:type="StringLiteral" value="C"/>
				</source>
				<separator xsi:type="StringLiteral" value=","/>
			</expression>
		</def>
		<!-- Split -->
		<def name="Split">
			<expression xsi:type="Split">
				<stringToSplit xsi:type="StringLiteral" value="A,B,C"/>
				<separator xsi:type="StringLiteral" value=","/>
			</expression>
		</def>
		<!-- Length -->
		<def name="StringLength">
			<expression xsi:type="Length">
				<operand xsi:type="StringLiteral" value="TestString"/>
			</expression>
		</def>
		<!-- Upper -->
		<def name="Upper">
			<expression xsi:type="StringLiteral" value="test"/>
		</def>
		<!-- Lower -->
		<def name="Lower">
			<expression xsi:type="StringLiteral" value="TEST"/>
		</def>
		<!-- Indexer -->
		<def name="StringIndexer">
			<expression xsi:type="Indexer">
				<operand xsi:type="StringLiteral" value="ABC"/>
				<index xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<!-- Pos -->
		<def name="Pos">
			<expression xsi:type="Pos">
				<pattern xsi:type="StringLiteral" value="ABC"/>
				<string xsi:type="StringLiteral" value="0123ABCDEFG"/>
			</expression>
		</def>
		<!-- Substring -->
		<def name="Substring">
			<expression xsi:type="Substring">
				<stringToSub xsi:type="StringLiteral" value="ABCDEFG"/>
				<startIndex xsi:type="IntegerLiteral" value="1"/>
				<length xsi:type="IntegerLiteral" value="3"/>
			</expression>
		</def>
		<!-- ********** Temporal Operators ********** -->
		<!-- DateAdd -->
		<def name="DateAdd">
			<expression xsi:type="DateAdd">
				<date xsi:type="TimestampLiteral" value="20130101"/>
				<granularity xsi:type="Literal" valueType="DateGranularity" value="Day"/>
				<numberOfPeriods xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<!-- DateDiff -->
		<def name="DateDiff">
			<expression xsi:type="DateDiff">
				<startDate xsi:type="TimestampLiteral" value="20130101"/>
				<endDate xsi:type="TimestampLiteral" value="20140101"/>
				<granularity xsi:type="Literal" valueType="DateGranularity" value="Day"/>
			</expression>
		</def>
		<!-- DatePart -->
		<def name="DatePart">
			<expression xsi:type="DatePart">
				<date xsi:type="TimestampLiteral" value="20130101"/>
				<granularity xsi:type="Literal" valueType="DateGranularity" value="Day"/>
			</expression>
		</def>
		<!-- DateOf -->
		<def name="DateOf">
			<expression xsi:type="DateOf">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<!-- TimeOf -->
		<def name="TimeOf">
			<expression xsi:type="TimeOf">
				<operand xsi:type="TimestampLiteral" value="20130101"/>
			</expression>
		</def>
		<!-- Today -->
		<def name="Today">
			<expression xsi:type="Today"/>
		</def>
		<!-- Now -->
		<def name="Now">
			<expression xsi:type="Now"/>
		</def>
		<!-- Date -->
		<def name="Date">
			<expression xsi:type="Date">
				<year xsi:type="IntegerLiteral" value="2013"/>
				<month xsi:type="IntegerLiteral" value="1"/>
				<day xsi:type="IntegerLiteral" value="1"/>
			</expression>
		</def>
		<!-- ********** Interval Operators ********** -->
		<!-- Property Accessors -->
		<def name="IntervalBeginProperty">
			<expression xsi:type="Property" path="begin">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalBeginOpenProperty">
			<expression xsi:type="Property" path="beginOpen">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalEndProperty">
			<expression xsi:type="Property" path="end">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalEndOpenProperty">
			<expression xsi:type="Property" path="endOpen">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalLowProperty">
			<expression xsi:type="Property" path="low">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalLowClosedProperty">
			<expression xsi:type="Property" path="lowClosed">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalHighProperty">
			<expression xsi:type="Property" path="high">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="IntervalHighClosedProperty">
			<expression xsi:type="Property" path="highClosed">
				<source xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Equal -->
		<def name="IntervalEqual">
			<!-- Returns true, because the intervals represent the same final range of points -->
			<expression xsi:type="Equal">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5" 
					lowClosed="true" highClosed="true"/>
				<operand xsi:type="IntegerIntervalLiteral" low="0" high="6" 
					lowClosed="false" highClosed="false"/>
			</expression>
		</def>
		<!-- NotEqual -->
		<def name="IntervalNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5" lowClosed="true" highClosed="true"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5" lowClosed="false" highClosed="false"/>
			</expression>
		</def>
		<!-- Length -->
		<def name="IntervalLength">
			<!-- Returns 5, the interval contains 5 points. -->
			<expression xsi:type="Length">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Begin -->
		<def name="Begin">
			<!-- Returns 1, the beginning of the closed interval -->
			<expression xsi:type="Begin">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<def name="BeginOpen">
			<!-- Returns 2, the beginning of the open interval -->
			<expression xsi:type="Begin">
				<operand xsi:type="IntegerIntervalLiteral" low="1" lowClosed="false" high="5"/>
			</expression>
		</def>
		<!-- End -->
		<def name="End">
			<expression xsi:type="End">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Contains -->
		<def name="IntervalContains">
			<!-- Returns true, the interval contains the point 2 -->
			<expression xsi:type="Contains">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerLiteral" value="2"/>
			</expression>
		</def>
		<!-- In -->
		<def name="IntervalIn">
			<!-- Returns true, the point 2 is in the interval -->
			<expression xsi:type="In">
				<operand xsi:type="IntegerLiteral" value="2"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Includes -->
		<def name="IntervalIncludes">
			<!-- Returns true, the first interval includes the second -->
			<expression xsi:type="Includes">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="4"/>
			</expression>
		</def>
		<!-- IncludedIn -->
		<def name="IntervalIncludedIn">
			<expression xsi:type="IncludedIn">
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="4"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- ProperIncludes -->
		<def name="IntervalProperIncludes">
			<expression xsi:type="ProperIncludes">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="4"/>
			</expression>
		</def>
		<!-- ProperIncludedIn -->
		<def name="IntervalProperIncludedIn">
			<!-- Returns true, the first interval is properly included in the second -->
			<expression xsi:type="ProperIncludedIn">
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="4"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Before -->
		<def name="Before">
			<expression xsi:type="Before">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="2"/>
				<operand xsi:type="IntegerIntervalLiteral" low="10" high="20"/>
			</expression>
		</def>
		<!-- After -->
		<def name="After">
			<expression xsi:type="After">
				<operand xsi:type="IntegerIntervalLiteral" low="10" high="20"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="2"/>
			</expression>
		</def>
		<!-- Meets -->
		<def name="Meets">
			<expression xsi:type="Meets">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="2"/>
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="3"/>
			</expression>
		</def>
		<!-- Overlaps -->
		<def name="Overlaps">
			<expression xsi:type="Overlaps">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="6"/>
			</expression>
		</def>
		<!-- OverlapsBefore -->
		<def name="OverlapsBefore">
			<expression xsi:type="OverlapsBefore">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="6"/>
			</expression>
		</def>
		<!-- OverlapsAfter -->
		<def name="OverlapsAfter">
			<expression xsi:type="OverlapsAfter">
				<operand xsi:type="IntegerIntervalLiteral" low="2" high="6"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Begins -->
		<def name="Begins">
			<expression xsi:type="Begins">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="3"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Ends -->
		<def name="Ends">
			<expression xsi:type="Ends">
				<operand xsi:type="IntegerIntervalLiteral" low="3" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
			</expression>
		</def>
		<!-- Collapse -->
		<def name="Collapse">
			<!-- Returns the intervals [1..9], [11..15] -->
			<expression xsi:type="Collapse">
				<operand xsi:type="List">
					<element xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
					<element xsi:type="IntegerIntervalLiteral" low="3" high="7"/>
					<element xsi:type="IntegerIntervalLiteral" low="5" high="9"/>
					<element xsi:type="IntegerIntervalLiteral" low="11" high="15"/>
					<element xsi:type="IntegerIntervalLiteral" low="13" high="14"/>
				</operand>
			</expression>
		</def>
		<!-- Union -->
		<def name="IntervalUnion">
			<!-- Returns the interval [1..7] -->
			<expression xsi:type="Union">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="3" high="7"/>
			</expression>
		</def>
		<!-- Intersect -->
		<def name="IntervalIntersect">
			<!-- Returns the interval [3..5] -->
			<expression xsi:type="Intersect">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="3" high="7"/>
			</expression>
		</def>
		<!-- Difference -->
		<def name="IntervalDifference">
			<!-- Returns the interval [1..2] -->
			<expression xsi:type="Difference">
				<operand xsi:type="IntegerIntervalLiteral" low="1" high="5"/>
				<operand xsi:type="IntegerIntervalLiteral" low="3" high="7"/>
			</expression>
		</def>
		<!-- ********** List Operators ********** -->
		<!-- Equal -->
		<def name="ListEqual">
			<!-- Returns true because the lists are equal by value. -->
			<expression xsi:type="Equal">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
			</expression>
		</def>
		<!-- NotEqual -->
		<def name="ListNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
			</expression>
		</def>
		<!-- IsEmpty -->
		<def name="IsEmpty">
			<!-- Returns true because the operand has no elements -->
			<expression xsi:type="IsEmpty">
				<operand xsi:type="List"/>
			</expression>
		</def>
		<!-- IsNotEmpty -->
		<def name="IsNotEmpty">
			<!-- Returns true because the operand has at least one element -->
			<expression xsi:type="IsNotEmpty">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
			</expression>
		</def>
		<!-- Union -->
		<def name="ListUnion">
			<!-- Returns a list with all elements (integers 1 through 9) -->
			<expression xsi:type="Union">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
					<element xsi:type="IntegerLiteral" value="6"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="7"/>
					<element xsi:type="IntegerLiteral" value="8"/>
					<element xsi:type="IntegerLiteral" value="9"/>
				</operand>
			</expression>
		</def>
		<!-- Intersect -->
		<def name="ListIntersect">
			<!-- Returns a list with only the common elements (the integer 3) -->
			<expression xsi:type="Intersect">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</operand>
			</expression>
		</def>
		<!-- Difference -->
		<def name="ListDifference">
			<!-- Returns a list without the elements of the second (the integer 1) -->
			<expression xsi:type="Difference">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
			</expression>
		</def>
		<!-- Filter -->
		<def name="Filter">
			<!-- Returns a list with only the first element -->
			<expression xsi:type="Filter">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</source>
				<condition xsi:type="Equal">
					<operand xsi:type="Current"/>
					<operand xsi:type="IntegerLiteral" value="1"/>
				</condition>
			</expression>
		</def>
		<!-- First -->
		<def name="First">
			<!-- Returns the first element, the integer 1 -->
			<expression xsi:type="First">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</source>
			</expression>
		</def>
		<!-- Last -->
		<def name="Last">
			<!-- Returns the last element, the integer 3 -->
			<expression xsi:type="Last">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</source>
			</expression>
		</def>
		<!-- Indexer -->
		<def name="ListIndexer">
			<!-- Returns the second element, the integer 5 -->
			<expression xsi:type="Indexer">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
					<element xsi:type="IntegerLiteral" value="6"/>
				</operand>
				<index xsi:type="IntegerLiteral" value="2"/>
			</expression>
		</def>
		<!-- IndexOf -->
		<def name="IndexOf">
			<!-- Returns the index of the integer 5, 2 -->
			<expression xsi:type="IndexOf">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
					<element xsi:type="IntegerLiteral" value="6"/>
				</source>
				<element xsi:type="IntegerLiteral" value="5"/>
			</expression>
		</def>
		<!-- Contains -->
		<def name="ListContains">
			<!-- Returns true because the list contains the integer 2 -->
			<expression xsi:type="Contains">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
				<operand xsi:type="IntegerLiteral" value="2"/>
			</expression>
		</def>
		<!-- In -->
		<def name="ListIn">
			<!-- Returns true because the integer 2 is in the list -->
			<expression xsi:type="In">
				<operand xsi:type="IntegerLiteral" value="2"/>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</operand>
			</expression>
		</def>
		<!-- Includes -->
		<def name="ListIncludes">
			<!-- Returns true because the first list includes the second. -->
			<expression xsi:type="Includes">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
			</expression>
		</def>
		<!-- IncludedIn -->
		<def name="ListIncludedIn">
			<expression xsi:type="IncludedIn">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</operand>
			</expression>
		</def>
		<!-- ProperIncludes -->
		<def name="ListProperIncludes">
			<expression xsi:type="ProperIncludes">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
			</expression>
		</def>
		<!-- ProperIncludedIn -->
		<def name="ListProperIncludedIn">
			<expression xsi:type="ProperIncludedIn">
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
				</operand>
				<operand xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</operand>
			</expression>
		</def>
		<!-- Expand -->
		<def name="Expand">
			<!-- Returns a single list containing the nested elements -->
			<expression xsi:type="Expand">
				<operand xsi:type="List">
					<element xsi:type="List">
						<element xsi:type="IntegerLiteral" value="1"/>
						<element xsi:type="IntegerLiteral" value="2"/>
						<element xsi:type="IntegerLiteral" value="3"/>
					</element>
					<element xsi:type="List">
						<element xsi:type="IntegerLiteral" value="4"/>
						<element xsi:type="IntegerLiteral" value="5"/>
						<element xsi:type="IntegerLiteral" value="6"/>
					</element>
					<element xsi:type="List">
						<element xsi:type="IntegerLiteral" value="7"/>
						<element xsi:type="IntegerLiteral" value="8"/>
						<element xsi:type="IntegerLiteral" value="9"/>
					</element>
				</operand>
			</expression>
		</def>
		<!-- Sort -->
		<def name="Sort">
			<!-- Returns the list sorted by value ascending -->
			<expression xsi:type="Sort">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- ForEach -->
		<def name="ForEach">
			<!-- Returns a list with each element set to the computed element (current * 2) -->
			<expression xsi:type="ForEach">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</source>
				<element xsi:type="Multiply">
					<operand xsi:type="Current"/>
					<operand xsi:type="IntegerLiteral" value="2"/>
				</element>
			</expression>
		</def>
		<!-- Distinct -->
		<def name="Distinct">
			<expression xsi:type="Distinct">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="3"/>
				</source>
			</expression>
		</def>
		<!-- Scope -->
		<def name="Medications">
			<!-- Returns medications in the year 2013 with a code in the value set 12345 -->
			<expression xsi:type="ClinicalRequest" 
					cardinality="Multiple" 
					dataType="vmr:SubstanceAdministrationEvent" 
					codeProperty="substanceAdministrationGeneralPurpose" 
					dateProperty="administrationTimeInterval.low">
				<codes xsi:type="ValueSet" authority="VSAC" id="12345"/>
				<dateRange xsi:type="TimestampIntervalLiteral" highClosed="false">
					<low value="20130101"/>
					<high value="20140101"/>
				</dateRange> 
			</expression>
		</def>
		<def name="Encounters">
			<!-- Returns encounters in the year 2013 with a code in the value set 56789 -->
			<expression xsi:type="ClinicalRequest" 
					cardinality="Multiple" 
					dataType="vmr:EncounterEvent" 
					codeProperty="encounterType" 
					dateProperty="encounterEventTime.low">
				<codes xsi:type="ValueSet" authority="VSAC" id="56789"/>
				<dateRange xsi:type="TimestampIntervalLiteral" highClosed="false">
					<low value="20130101"/>
					<high value="20140101"/>
				</dateRange> 
			</expression>
		</def>
		<def name="CorrelatedSubquery">
			<!-- Returns medications that were administered during an encounter -->
			<expression xsi:type="Filter" scope="M">
				<source xsi:type="ExpressionRef" name="Medications"/>
				<condition xsi:type="IsNotEmpty">
					<operand xsi:type="Filter" scope="E">
						<source xsi:type="ExpressionRef" name="Encounters"/>
						<condition xsi:type="IncludedIn">
							<operand xsi:type="Property" scope="M" 
								path="administrationTimeInterval"/>
							<operand xsi:type="Property" scope="E" 
								path="encounterEventTime"/>
						</condition>
					</operand>
				</condition>
			</expression>
		</def>
		<!-- Current -->
		<!-- ********** Aggregate Operators -->
		<!-- Count -->
		<def name="ListCount">
			<expression xsi:type="Count">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Sum -->
		<def name="ListSum">
			<expression xsi:type="Sum">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Min -->
		<def name="ListMin">
			<expression xsi:type="Min">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Max -->
		<def name="ListMax">
			<expression xsi:type="Max">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Avg -->
		<def name="ListAvg">
			<expression xsi:type="Avg">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Median -->
		<def name="ListMedian">
			<expression xsi:type="Median">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Mode -->
		<def name="ListMode">
			<expression xsi:type="Mode">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- Variance -->
		<def name="ListVariance">
			<expression xsi:type="Variance">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- PopulationVariance -->
		<def name="ListPopulationVariance">
			<expression xsi:type="PopulationVariance">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- StdDev -->
		<def name="ListStdDev">
			<expression xsi:type="StdDev">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- PopulationStdDev -->
		<def name="ListPopulationStdDev">
			<expression xsi:type="PopulationStdDev">
				<source xsi:type="List">
					<element xsi:type="IntegerLiteral" value="1"/>
					<element xsi:type="IntegerLiteral" value="2"/>
					<element xsi:type="IntegerLiteral" value="3"/>
					<element xsi:type="IntegerLiteral" value="4"/>
					<element xsi:type="IntegerLiteral" value="5"/>
				</source>
			</expression>
		</def>
		<!-- AllTrue -->
		<def name="ListAllTrue">
			<expression xsi:type="AllTrue">
				<source xsi:type="List">
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
				</source>
			</expression>
		</def>
		<!-- AnyTrue -->
		<def name="ListAnyTrue">
			<expression xsi:type="AnyTrue">
				<source xsi:type="List">
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
					<element xsi:type="BooleanLiteral" value="true"/>
				</source>
			</expression>
		</def>
		<def name="ListAnyTrueWithPath">
			<expression xsi:type="AnyTrue" path="AdmissionData.IsAdmitted">
				<source xsi:type="ExpressionRef" name="Patient"/>
			</expression>
		</def>

		<!-- ********** Structured Value Operators ********** -->
		<!-- Equal -->
		<def name="ObjectEqual">
			<expression xsi:type="Equal">
				<operand xsi:type="AddressLiteral">
					<part value="123 Spinning Ave" type="ADL"/>
				</operand>
				<operand xsi:type="AddressLiteral">
					<part value="123 Spinning Ave" type="ADL"/>
				</operand>
			</expression>
		</def>
		<!-- NotEqual -->
		<def name="ObjectNotEqual">
			<expression xsi:type="NotEqual">
				<operand xsi:type="AddressLiteral">
					<part value="123 Spinning Ave" type="ADL"/>
				</operand>
				<operand xsi:type="AddressLiteral">
					<part value="124 Spinning Ave" type="ADL"/>
				</operand>
			</expression>
		</def>
		<!-- Property -->
		<def name="Property">
			<expression xsi:type="Property" path="code">
				<source xsi:type="CodeLiteral" code="12345" codeSystem="CodeSystem" codeSystemName="CodeSystemName" displayName="DisplayName"/>
			</expression>
		</def>
		<!-- ********** Data Operators ********** -->
		<!-- DataRequest -->
		<def name="DataRequest">
			<expression xsi:type="DataRequest" cardinality="Multiple" dataType="dt:CD"/>
		</def>
		<!-- ClinicalRequest -->
		<def name="ClinicalRequest">
			<expression xsi:type="ClinicalRequest" 
					cardinality="Multiple" 
					dataType="vmr:SubstanceAdministrationEvent" 
					codeProperty="substanceAdministrationGeneralPurpose" 
					dateProperty="administrationTimeInterval.low">
				<codes xsi:type="List">
					<element xsi:type="CodeLiteral" code="12345" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="23456" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="34567" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="45678" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="56789" codeSystem="Test"/>
				</codes>
				<dateRange xsi:type="TimestampIntervalLiteral" lowClosed="true" highClosed="false">
					<low value="20130101"/>
					<high value="20140101"/>
				</dateRange> 
			</expression>
		</def>
		<!-- ValueSet -->
		<def name="ValueSet">
			<expression xsi:type="ValueSet" authority="Test" id="12345" version="1"/>
		</def>
		<!-- InValueSet -->
		<def name="InValueSet">
			<expression xsi:type="InValueSet" authority="Test" id="12345" version="1">
				<operand xsi:type="CodeLiteral" code="12345" codeSystem="Test"/>
			</expression>
		</def>
		<!-- Subsumes -->
		<def name="Subsumes">
			<expression xsi:type="Subsumes">
				<ancestor xsi:type="CodeLiteral" code="12345" codeSystem="Test"/>
				<descendent xsi:type="CodeLiteral" code="56789" codeSystem="Test"/>
			</expression>
		</def>
		<!-- SetSubsumes -->
		<def name="SetSubsumes">
			<expression xsi:type="SetSubsumes">
				<ancestors xsi:type="List">
					<element xsi:type="CodeLiteral" code="12345" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="23456" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="34567" codeSystem="Test"/>
				</ancestors>
				<descendents xsi:type="List">
					<element xsi:type="CodeLiteral" code="54321" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="65432" codeSystem="Test"/>
					<element xsi:type="CodeLiteral" code="76543" codeSystem="Test"/>
				</descendents>
			</expression>
		</def>
	</expressions>
	<conditions>
		<condition>
			<logic xsi:type="Equal">
				<operand xsi:type="Literal" valueType="xsi:int" value="24"/>
				<operand xsi:type="IntegerLiteral" value="24"/>
			</logic>
			<conditionRole value="ApplicableScenario"/>
		</condition>
	</conditions>
	<actionGroup>
		<subElements>
			<simpleAction xsi:type="CreateAction">
				<textEquivalent value="This is a test message."/>
			</simpleAction>
		</subElements>
	</actionGroup>
</knowledgeDocument>

