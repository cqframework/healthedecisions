<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2013 sp1 (http://www.altova.com) by Bryn Rhodes (Database Consulting Group) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:hl7-org:knowledgeartifact:r1" xmlns:dt="urn:hl7-org:cdsdt:r2" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="urn:hl7-org:knowledgeartifact:r1" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>
			This file defines additional expressions that provide syntactic short-hands for literals for each of the base data types.
		</xs:documentation>
	</xs:annotation>
	<xs:import namespace="urn:hl7-org:cdsdt:r2" schemaLocation="../common/datatypes.xsd"/>
	<xs:include schemaLocation="expression.xsd"/>
	<!-- 
		AD - Address : ANY
			use : set_PostalAddressUse
			part : List<ADXP>
	-->
	<xs:complexType name="AddressLiteral">
		<xs:annotation>
			<xs:documentation>The AddressLiteral expression returns a value of type AD with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="part" type="dt:ADXP" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="use" type="dt:set_PostalAddressUse" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		BL - Boolean : ANY
			value : xs:boolean
	-->
	<xs:complexType name="BooleanLiteral">
		<xs:annotation>
			<xs:documentation>The BooleanLiteral expression returns a value of type BL with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:boolean" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		CD - Code : ANY
			code : Code
			codeSystem : Uid
			codeSystemName : xs:string
			displayName : xs:string
			originalText : xs:string
	-->
	<xs:complexType name="CodeLiteral">
		<xs:annotation>
			<xs:documentation>The CodeLiteral expression returns a value of type CD with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="codeSystem" type="dt:Uid" use="optional"/>
				<xs:attribute name="code" type="dt:Code" use="optional"/>
				<xs:attribute name="codeSystemName" type="xs:string" use="optional"/>
				<xs:attribute name="displayName" type="xs:string" use="optional"/>
				<xs:attribute name="codeSystemVersion" type="xs:string" use="optional"/>
				<xs:attribute name="valueSet" type="dt:Uid" use="optional"/>
				<xs:attribute name="valueSetVersion" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		CO - CodedOrdinal : ANY
			code : CD
			value : Decimal
	-->
	<xs:complexType name="CodedOrdinalLiteral">
		<xs:annotation>
			<xs:documentation>The CodedOrdinalLiteral expression returns a value of type CO with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="codeSystem" type="dt:Uid" use="required"/>
				<xs:attribute name="code" type="dt:Code" use="required"/>
				<xs:attribute name="codeSystemName" type="xs:string" use="optional"/>
				<xs:attribute name="displayName" type="xs:string" use="optional"/>
				<xs:attribute name="value" type="dt:Decimal" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		CS - CodeSimple : ANY
			code : xs:string
	-->
	<xs:complexType name="SimpleCodeLiteral">
		<xs:annotation>
			<xs:documentation>The SimpleCodeLiteral expression returns a value of type CS with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="code" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		EN - EntityName : ANY
			use : set_EntityNameUse
			part : List<ENXP>
	-->
	<xs:complexType name="EntityNameLiteral">
		<xs:annotation>
			<xs:documentation>The EntityNameLiteral expression returns a value of type EN with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="part" type="dt:ENXP" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="use" type="dt:set_EntityNameUse" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		II - Identifier : ANY
			root : Uid
			extension : xs:string
	-->
	<xs:complexType name="IdentifierLiteral">
		<xs:annotation>
			<xs:documentation>The IdentifierLiteral expression returns a value of type II with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="root" type="dt:Uid" use="required"/>
				<xs:attribute name="extension" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		INT - Integer : QTY
			value : xs:int
	-->
	<xs:complexType name="IntegerLiteral">
		<xs:annotation>
			<xs:documentation>The IntegerLiteral expression returns a value of type INT with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:int" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_INT - IntegerInterval : ANY
			low : xs:int
			high : xs:int
			lowClosed : xs:boolean
			highClosed : xs:boolean
	-->
	<xs:complexType name="IntegerIntervalLiteral">
		<xs:annotation>
			<xs:documentation>The IntegerIntervalLiteral expression returns a value of type IVL_INT with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="low" type="xs:int"/>
				<xs:attribute name="high" type="xs:int"/>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional"/>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_PQ - PhysicalQuantityInterval : ANY
			ATTR_PQ_LOW
			ATTR_PQ_HIGH
			lowClosed : xs:boolean
			highClosed : xs:boolean
	-->
	<xs:complexType name="PhysicalQuantityIntervalLiteral">
		<xs:annotation>
			<xs:documentation>The PhysicalQuantityIntervalLiteral expression returns a value of type IVL_PQ with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="low" type="dt:PQ" minOccurs="0" maxOccurs="1"/>
					<xs:element name="high" type="dt:PQ" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional"/>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_QTY - QuantityInterval : ANY
			low : QTY
			high : QTY
			lowClosed : xs:boolean
			highClosed : xs:boolean
	-->
	<xs:complexType name="QuantityIntervalLiteral">
		<xs:annotation>
			<xs:documentation>The QuantityIntervalLiteral expression returns a value of type IVL_QTY with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="low" type="dt:QTY" minOccurs="0"/>
					<xs:element name="high" type="dt:QTY" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional"/>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_REAL - RealInterval : ANY
			low : Decimal
			high : Decimal
			lowClosed : xs:boolean
			highClosed : xs:boolean
	-->
	<xs:complexType name="RealIntervalLiteral">
		<xs:annotation>
			<xs:documentation>The RealIntervalLiteral expression returns a value of type IVL_REAL with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="low" type="dt:Decimal"/>
				<xs:attribute name="high" type="dt:Decimal"/>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional"/>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_TS - TimestampInterval : ANY
			ATTR_TS_LOW
			ATTR_TSHIGH
			lowClosed : xs:boolean
			highClosed : xs:boolean
	-->
	<xs:complexType name="TimestampIntervalLiteral">
		<xs:annotation>
			<xs:documentation>The TimestampIntervalLiteral expression returns a value of type IVL_TS with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="low" type="dt:TS" minOccurs="0" maxOccurs="1"/>
					<xs:element name="high" type="dt:TS" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional"/>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		PQ - PhysicalQuantity : QTY
			ATTR_PQ
	-->
	<xs:complexType name="PhysicalQuantityLiteral">
		<xs:annotation>
			<xs:documentation>The PhysicalQuantityLiteral expression returns a value of type PQ with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="dt:Decimal" use="required"/>
				<xs:attribute name="unit" type="dt:Code" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		REAL - Real : QTY
			value : Decimal
	-->
	<xs:complexType name="RealLiteral">
		<xs:annotation>
			<xs:documentation>The RealLiteral expression returns a value of type Real with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="dt:Decimal" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		RTO - Ratio : QTY
			numerator : QTY
			denominator : QTY
	-->
	<xs:complexType name="RatioLiteral">
		<xs:annotation>
			<xs:documentation>The RaioLiteral expression returns a value of type RTO with the given numerator and denominator.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="numerator" type="dt:QTY">
						<xs:annotation>
							<xs:documentation>The quantity that is being divided in the ratio</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="denominator" type="dt:QTY">
						<xs:annotation>
							<xs:documentation>The quantity that divides the numerator in the ratio. 
The denominator SHALL not be zero.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		RTO_INT - Ratio : QTY
			ATTR_RTO_INT
	<xs:complexType name="IntegerRatioLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type RTO_INT with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="numerator" type="dt:INT" minOccurs="1" maxOccurs="1"/>
					<xs:element name="denominator" type="dt:INT" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	-->
	<!--
		RTO_PQ - Ratio : QTY
			ATTR_RTO_PQ
	<xs:complexType name="PhysicalQuantityRatioLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type RTO_PQ with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="numerator" type="dt:PQ" minOccurs="1" maxOccurs="1"/>
					<xs:element name="denominator" type="dt:PQ" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	-->
	<!--
		ST - String : ANY
			value : xs:string
	-->
	<xs:complexType name="StringLiteral">
		<xs:annotation>
			<xs:documentation>The StringLiteral expression returns a value of type ST with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		TEL - URL : ANY
			value : xs:anyURI
			use : set_TelecommunicationAddressUse
			capabilities : set_TelecommunicationCapability
			useablePeriodOriginalText : xs:string
	-->
	<xs:complexType name="UrlLiteral">
		<xs:annotation>
			<xs:documentation>The UrlLiteral expression returns a value of type TEL with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:anyURI" use="required"/>
				<xs:attribute name="use" type="dt:set_TelecommunicationAddressUse" use="optional"/>
				<xs:attribute name="capabilities" type="dt:set_TelecommunicationCapability" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		TS - Timestamp : QTY
			value : xs:string (regex restricted)
	-->
	<xs:complexType name="TimestampLiteral">
		<xs:annotation>
			<xs:documentation>The TimestampLiteral expression returns a value of type TS with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="dt:TimeStamp" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		PIVL_TS
			phase : IVL_TS
			period : PQ
			frequency : RTO
			count : INT
			alignment : CalendarCycle
			isFlexible : xs:boolean
	-->
	<xs:complexType name="PeriodLiteral">
		<xs:annotation>
			<xs:documentation>The PeriodLiteral expression returns a value of type PIVL_TS with the given attributes.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="phase" type="dt:IVL_TS" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A prototype of the repeating interval, specifying the duration of each occurrence and anchors the PIVL sequence at a certain point in time. phase also marks the anchor point in time for the entire series of periodically recurring intervals. If count is null or nullFlavored, the recurrence of a PIVL has no beginning or ending, but is infinite in both future and past. 

The width of the phase SHALL be less than or equal to the period</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="period" type="dt:PQ" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A time duration specified as a reciprocal measure of the frequency at which the PIVL repeats.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="frequency" type="dt:RTO" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The number of times the PIVL repeats (numerator) within a specified time-period (denominator). The numerator is an integer, and the denominator is a PQ.TIME.

Only one of period and frequency should be specified. The form chosen should be the form that most naturally conveys the idea to humans. i.e. Every 10 mins (period) or twice a day (frequency).</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="count" type="dt:INT" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The number of times the period repeats in total. If count is null, then the period repeats indefinitely both before and after the anchor implicit in the phase.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="alignment" type="dt:CalendarCycle" use="optional"/>
				<xs:attribute name="isFlexible" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Indicates whether the exact timing is up to the party executing the schedule e.g., to distinguish "every 8 hours" from "3 times a day".

Note: this is sometimes referred to as "institution specified timing".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
			<!--  changed from bl to xs:boolean since bl was removed as a type 
					Aziz Boxwala 
				 -->
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
